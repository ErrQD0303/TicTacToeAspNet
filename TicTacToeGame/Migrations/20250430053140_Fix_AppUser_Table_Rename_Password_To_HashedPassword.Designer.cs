// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicTacToeGame.Data;

#nullable disable

namespace TicTacToeGame.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250430053140_Fix_AppUser_Table_Rename_Password_To_HashedPassword")]
    partial class Fix_AppUser_Table_Rename_Password_To_HashedPassword
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicTacToeGame.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", "Identity");
                });

            modelBuilder.Entity("TicTacToeGame.Models.TicTacToeMatch", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("BoardData")
                        .IsRequired()
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<bool>("IsPlayer1Turn")
                        .HasColumnType("bit");

                    b.Property<string>("Player1Id")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Player2Id")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<string>("TicTacToeMatchHistoryId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2Id");

                    b.ToTable("TicTacToeMatches", "TicTacToe");
                });

            modelBuilder.Entity("TicTacToeGame.Models.TicTacToeMatchHistory", b =>
                {
                    b.Property<string>("TicTacToeMatchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.HasKey("TicTacToeMatchId");

                    b.ToTable("TicTacToeMatchHistories", "TicTacToe");
                });

            modelBuilder.Entity("TicTacToeGame.Models.TicTacToeMatch", b =>
                {
                    b.HasOne("TicTacToeGame.Models.AppUser", "Player1")
                        .WithMany("MatchesAsPlayer1")
                        .HasForeignKey("Player1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicTacToeGame.Models.AppUser", "Player2")
                        .WithMany("MatchesAsPlayer2")
                        .HasForeignKey("Player2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player1");

                    b.Navigation("Player2");
                });

            modelBuilder.Entity("TicTacToeGame.Models.TicTacToeMatchHistory", b =>
                {
                    b.HasOne("TicTacToeGame.Models.TicTacToeMatch", "TicTacToeMatch")
                        .WithOne("TicTacToeMatchHistory")
                        .HasForeignKey("TicTacToeGame.Models.TicTacToeMatchHistory", "TicTacToeMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TicTacToeMatch");
                });

            modelBuilder.Entity("TicTacToeGame.Models.AppUser", b =>
                {
                    b.Navigation("MatchesAsPlayer1");

                    b.Navigation("MatchesAsPlayer2");
                });

            modelBuilder.Entity("TicTacToeGame.Models.TicTacToeMatch", b =>
                {
                    b.Navigation("TicTacToeMatchHistory")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
